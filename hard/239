class Solution {
public:
    // 239. Sliding Window Maximum
//     time taken: 38 minutes, we try to maintain larget current element at front of queue but smaller numbers that are pushed behind the max should also maintain the property so that there isnt a smaller value pushed between to local maxs
//     Runtime: 465 ms, faster than 33.50% of C++ online submissions for Sliding Window Maximum.
// Memory Usage: 132.4 MB, less than 42.15% of C++ online submissions for Sliding Window Maximum.
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> q;// push indices
        vector<int> res;
        for(int i=0; i<nums.size(); i++) {
            while(q.empty() == false && q.front() <= i-k) {
                q.pop_front();
            }
            while(q.empty() == false && nums[q.front()] <= nums[i]) {
                q.pop_front();
            }
            while(q.empty() == false && nums[q.back()] <= nums[i]) {
                q.pop_back();
            }
            
            q.push_back(i);
            if(i >= k-1) {
                res.push_back(nums[q.front()]);
            }
        }
        return res;
    }
};