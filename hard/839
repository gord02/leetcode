class Solution {
public:
// 839. Similar String Groups
// did an if in place of else if which messed up logic for a test case
// Runtime
// 355 ms
// Beats
// 22.39%
// Memory
// 138.2 MB
// Beats
// 11.67%
    void unit(int x, int y, vector<int> &parent, vector<int> &rank) {
        int parX = find(x, parent);
        int parY = find(y, parent);
        if(parX == parY)  {
            return;
        }
        if(rank[parX] > rank[parY]) {
            parent[parY] = parX;
        }
        else if(rank[parX] == rank[parY]) {
            parent[parY] = parX;
            rank[parX]++;
        }
        else{
            parent[parX] = parY;
        }
    }
    int find(int x, vector<int> &parent) {
        // cout << "this is x: " << x << endl;
        if(x == parent[x]) {
            return x;
        }
        parent[x] = find(parent[x], parent);
        return parent[x];
    }
    bool areSimilar(string s1, string s2) {
        vector<int> diffs;
        for(int i=0; i< s1.size(); i++) {
            if(s1[i] != s2[i]) {
                if(diffs.size() < 2) {
                    diffs.push_back(i);
                }else{
                // more than 2 differences in letters in the string, therefore one swap is not enough to make the strings eqaul
                    return false;
                }
            }
        }
        if(diffs.size() > 0) {
            swap(s1[diffs[0]] , s1[diffs[diffs.size()-1]] );
        }
        if(s1 != s2) {
            return false;
        }
        return true;
    }
    
    int numSimilarGroups(vector<string>& strs) {
        vector<int> parent(strs.size(), 0);
        vector<int> rank(strs.size(), 0);
        for(int i=0; i< strs.size(); i++) {
            parent[i] = i;
            rank[i] = 1;
        }

        for(int i=0; i< strs.size(); i++) {
            for(int j=0; j<i; j++) {
                if( areSimilar(strs[i], strs[j]) ) {
                    // cout << i << " " << j << endl;
                    unit(i, j, parent, rank);


                    // for(int i=0; i< parent.size(); i++) {
                    //     cout << parent[i] << " " << flush;
                    // }
                    // cout << endl;
                }

            }
        }
        set<int> groups;
        // cout << "end"<<endl;

        // for(int i=0; i< parent.size(); i++) {
        //     cout << parent[i] << " " << flush;
        // }
        // cout << endl;

        for(int i=0; i< parent.size(); i++) {
            // making sure we get the exact root of the group
            int g = find(i, parent);
            // cout << "got root"<<endl;
            groups.insert(g);
        }
        return groups.size();
    }
};