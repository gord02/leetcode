class Solution {
public:
// just counting open and closed brackets doesnt help. ORDER to the amtching that needs to be considered. typing errors
// need to count number of right brackets.
// when conut of irght out numbers count of left its it not possible for it to beccome valid since left would have to appear to the rigth of right
    bool valid(string s) {
        int c = 0;
        for(int i=0; i< s.size(); i++) {
            if(s[i] == '(') {
                c++;
            }
            if(s[i] == ')') {
                c--;
            }
            if(c < 0) {
                return false;
            }
        }
        if(c != 0) {
            return false;
        }
        return true;
    }
    void rec(int i, int openCount, string s, int dels, string str, map<int, vector<string>> &dict) {
        if(i == str.size()) {
            
            // if(openCount == 0) {
            if(valid(s)) {
                auto it = dict.find(dels);
                if(it == dict.end()) {
                    dict.insert(pair<int, vector<string>> (dels, {s}));
                }else{
                    it->second.push_back(s);
                }
            }
            return;
        }
        if(str[i] == '(') {
            string newStr = s + "(";
            rec(i+1, openCount+1, newStr, dels, str, dict); // take char
            rec(i+1,openCount, s, dels+1, str, dict); // dont take char
        }
        else if(str[i] == ')') {
            string newStr = s + ")";
            rec(i+1, openCount-1, newStr, dels, str, dict); // take char
            rec(i+1,openCount, s, dels+1, str, dict); // dont take char
        }else{
            string newStr = s + str[i];
            rec(i+1, openCount, newStr, dels, str, dict); // take alphebtic char
        }
    }

    vector<string> removeInvalidParentheses(string s) {
        map<int, vector<string>> dict;
        set<string> strings;
        rec(0, 0, "", 0, s, dict);
        // get itertor to front of string, put al strings to set, put all set values to vector and return
        auto it = dict.begin();
        if(it == dict.end()) {
            return {};
        }
        vector<string> res;
        for(string str: it->second) {
            strings.insert(str);
        }
        for(string str: strings) {
            res.push_back(str);
        }
        return res;
    }
};