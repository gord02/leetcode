class MedianFinder {
public:
    struct maxVal{
        bool operator()(int i, int j) {
            return i < j; // puts largest value at back or top of structure
        }
    };

    struct minVal {
        bool operator()(int i, int j) {
            return i > j;
        }
    };

    priority_queue<int, vector<int>, maxVal> lower; 
    priority_queue<int, vector<int>, minVal> upper; 

    MedianFinder() {
        
    }
    
    void addNum(int num) {
        // we maintain a sorted list split into two halves
        upper.push(num);
        
        // in the case that through our previous pushes we added a larger value to lower than the current value being added to our list
        if(lower.size() > 0 && lower.top() > upper.top()) {
            int l = lower.top();
            lower.pop();
            int u = upper.top();
            upper.pop();

            lower.push(u);
            upper.push(l);
        }

        // balance out the rwo havles to manitain that the lower half as mush values than upper
        if(upper.size() > lower.size()) {
            lower.push(upper.top());
            upper.pop();
        }

    }
    
    double findMedian() {
        if( (lower.size() + upper.size()) % 2== 0) {
            return (lower.top() + upper.top())/2.0;
        }
        return lower.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */


// 295. Find Median from Data Stream
// time taken: 27 minutes 
// Runtime: 341 ms, faster than 95.35% of C++ online submissions for Find Median from Data Stream.
// Memory Usage: 117 MB, less than 89.87% of C++ online submissions for Find Median from Data Stream.
class MedianFinder {
    public:
    struct compare{
        bool operator()(int i, int j) {
            return i> j;
        }
    };
    priority_queue<int> max_q;//default prioirty q is max heap
    priority_queue<int, vector<int>, compare> min_q;
        void addNum(int num) {
            
            if(max_q.empty()) {
                max_q.push(num);
            }else{
                if(num <= max_q.top()) {
                    max_q.push(num);
                }else{
                    min_q.push(num);
                }
            }
            
//             even out sizes favouring max_q
            if(max_q.size() > min_q.size()+1) {// max_q should have one more than min_q
                int maxTop = max_q.top();
                max_q.pop();
                min_q.push(maxTop);
            }
            if(min_q.size()> max_q.size()) {
                int min = min_q.top();
                min_q.pop();
                max_q.push(min);
            }
        }
        double findMedian() {
            double median = 0;
            if( (max_q.size() + min_q.size()) % 2 == 0) {
//                 get median from both qs
                int first_mid = max_q.top();
                int second_mid = min_q.top();
                
                median = ((double)first_mid+second_mid)/2;
            }else{
                 median = max_q.top();
            }
            return median;
        }
};
 
 

class MedianFinder {
public:
    Runtime: 605 ms, faster than 13.49% of C++ online submissions for Find Median from Data Stream.
Memory Usage: 116.9 MB, less than 98.69% of C++ online submissions for Find Median from Data Stream.
    // vector<double> nums;
    struct compare {
        bool operator()(int i, int j) {
            return i>j;// min queue, smallest at back or top of dS
        }
    };
    
    priority_queue<int, vector<int>, compare> upper; 
    priority_queue<int> lower; //max queue
    MedianFinder() {
    }
    
    // void addNum(int num) {
    //     nums.push_back((double)num);
    //     sort(nums.begin(), nums.end());
    // }
    void addNum(int num) {
//         if the current number is smaller than top of lower, put it in lower, else, it needs to go in upper
        if(lower.size() == 0 || num <= lower.top()){
            lower.push(num); 
        }else{
            upper.push(num); 
        }
        if(lower.size() > upper.size()+1) {
            int top = lower.top();
            lower.pop();
            upper.push(top);
        }
        else if(lower.size() < upper.size()) {
            int top = upper.top();
            upper.pop();
            lower.push(top);
        }
    }
    
//     double findMedian() {
//         int size = nums.size();
//         if(size %2 != 0) { // odd
//             return nums[size/2];
//         }else{
// //             even
//             return (nums[size/2] + nums[(size/2) -1] )/2;
//         }
//     }
     double findMedian() {
         double res = 0.0;
         if(lower.size() == upper.size()) {
             // cout <<lower.top() << " " <<  upper.top()<< endl;
             res = (double)(lower.top() + upper.top())/2;
         }else{
            res = lower.top();
         }
         return res;
     }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */