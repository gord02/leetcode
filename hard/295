class MedianFinder {
public:
    Runtime: 605 ms, faster than 13.49% of C++ online submissions for Find Median from Data Stream.
Memory Usage: 116.9 MB, less than 98.69% of C++ online submissions for Find Median from Data Stream.
    // vector<double> nums;
    struct compare {
        bool operator()(int i, int j) {
            return i>j;// min queue, smallest at back or top of dS
        }
    };
    
    priority_queue<int, vector<int>, compare> upper; 
    priority_queue<int> lower; //max queue
    MedianFinder() {
    }
    
    // void addNum(int num) {
    //     nums.push_back((double)num);
    //     sort(nums.begin(), nums.end());
    // }
    void addNum(int num) {
//         if the current number is smaller than top of lower, put it in lower, else, it needs to go in upper
        if(lower.size() == 0 || num <= lower.top()){
            lower.push(num); 
        }else{
            upper.push(num); 
        }
        if(lower.size() > upper.size()+1) {
            int top = lower.top();
            lower.pop();
            upper.push(top);
        }
        else if(lower.size() < upper.size()) {
            int top = upper.top();
            upper.pop();
            lower.push(top);
        }
    }
    
//     double findMedian() {
//         int size = nums.size();
//         if(size %2 != 0) { // odd
//             return nums[size/2];
//         }else{
// //             even
//             return (nums[size/2] + nums[(size/2) -1] )/2;
//         }
//     }
     double findMedian() {
         double res = 0.0;
         if(lower.size() == upper.size()) {
             // cout <<lower.top() << " " <<  upper.top()<< endl;
             res = (double)(lower.top() + upper.top())/2;
         }else{
            res = lower.top();
         }
         return res;
     }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */