class Solution {
public:
    int dfs(int node, map<int, vector<int>>& adj, vector<bool>& hasApple, vector<bool>& seen) {
        seen[node] = true;
        int res = 0;
        auto it = adj.find(node);
        if(it != adj.end()) {
            for(int next: it->second) {
                if( seen[next] == false) {
                    res += dfs(next, adj, hasApple, seen);
                }
            }
        }
        if( (hasApple[node] == true && node != 0) || (res != 0  && node != 0) ) {
            res += 2;
        }
        return res;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        // movement from node to parent is just two, one in either direction
        vector<bool> seen(n, false);
        map<int, vector<int>> adj;

        for(auto edge: edges) {
            int a = edge[0];
            int b = edge[1];

            auto it = adj.find(a);
            if(it == adj.end()) {
                adj.insert(pair<int, vector<int>> (a, {b}));
            }else{
                it->second.push_back(b);
            }
            it = adj.find(b);
            if(it == adj.end()) {
                adj.insert(pair<int, vector<int>> (b, {a}));
            }else{
                it->second.push_back(a);
            }
        }
        return dfs(0, adj, hasApple, seen);
    }
};