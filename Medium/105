/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i = 0;
    vector<int> preorder;
    vector<int> inorder;
    map<int, int> mapping;
    TreeNode* build(int l, int r) {
        if(l > r) {
            return nullptr;
        }
        if(i >= preorder.size()) {
            return nullptr;
        }
        int inOrder_ind = mapping.find(preorder[i])->second;
        TreeNode* node = new TreeNode(inorder[inOrder_ind]);
        i++;
        node->left = build(l, inOrder_ind-1);
        node->right = build(inOrder_ind+1, r);
        
        return node;
        
    }
    // 105. Construct Binary Tree from Preorder and Inorder Traversal
//     time taken: 27 minutes 
//     didnt consider base case but was lucky enough to not need it
    // Runtime: 19 ms, faster than 82.07% of C++ online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
// Memory Usage: 26.5 MB, less than 30.18% of C++ online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        this->preorder = preorder;
        this->inorder = inorder;
        for(int j=0; j<inorder.size(); j++) {
            mapping.insert(pair<int, int>(inorder[j], j));
        }
        return build(0, inorder.size()-1);
    }
};