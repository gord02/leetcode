class Solution {
public:
// 2279. Maximum Bags With Full Capacity of Rocks
186 ms
Beats
97.14%
Memory
89.7 MB
Beats

12.75%
// time: 19 minutes
// overcomplicated problem or maybe under though it in the begining, used priority queue, reduced from runtime of nlogn*r to nlogn + r 
    int maximumBags(vector<int>& capacity, vector<int>& rocks, int additionalRocks) {
        vector<int> diffs;
        int count = 0;
        for(int i=0; i< capacity.size(); i++) {
            if(capacity[i] == rocks[i]) {
                count++;
            }else{
               diffs.push_back(capacity[i] - rocks[i]);
            }
        }
        sort(diffs.begin(), diffs.end());
        int pos = 0;
        while(additionalRocks > 0 && pos < diffs.size()) {
            if(diffs[pos] <= additionalRocks) {
                additionalRocks = additionalRocks - diffs[pos];
                count++;
                pos++;
            }else{
                break;
            }
        }
        return count;
    }
};

// time: 15 minutes
// class Solution {
// public:

//     struct compare{
//         bool operator()(vector<int> i, vector<int> j) {
//             // smallest diff at top of queue
//            return (i[0] - i[1]) > (j[0] - j[1]);
//         }
//     };
//     int maximumBags(vector<int>& capacity, vector<int>& rocks, int additionalRocks) {
//         priority_queue<vector<int>, vector<vector<int>>, compare>q;
//         int count = 0;
//         for(int i=0; i< capacity.size(); i++) {
//             if(capacity[i] == rocks[i]) {
//                 count++;
//             }else{
//                 q.push({capacity[i], rocks[i]});
//             }
//         }
//         while(additionalRocks > 0 && q.size() > 0) {
//             vector<int> rockDiff = q.top();
//             q.pop();

//             int diff = rockDiff[0] - rockDiff[1];
//             if(additionalRocks >= diff) {
//                 additionalRocks = additionalRocks - diff;
//                 count++;
//             }
//         }
//         return count;
//     }
// };