// Runtime: 4 ms, faster than 85.71% of C++ online submissions for Palindromic Substrings.
// Memory Usage: 6.3 MB, less than 83.51% of C++ online submissions for Palindromic Substrings.
    // Runtime: O(n^2)
    int countSubstrings(string s) {
        int count = 0;
        for(int i=0; i<s.length(); i++) {
            // palindrome(i, i);
            int left = i;
            int right = i;
            while(left >=0 && right <s.length() && s[left] == s[right]) {
                left--;
                right++;
                count++;
            }
        }
//         two center 
        for(int i=1; i<s.length(); i++) {
            // palindrome(i, i);
            int left = i-1;
            int right = i;
            while(left >=0 && right <s.length() && s[left] == s[right]) {
                left--;
                right++;
                count++;
            }
        }
        return count;
    }


//     647. Palindromic Substrings
//     Time taken: 18 mintues, only a brute force method though, a few minutes spent with error with substring
//     Runtime: 468 ms, faster than 8.71%, Memory Usage: 456.1 MB, less than 5.01%
Runtime O(n^3)
    int countSubstrings(string s) {
        int count = 0;
        for(int i=0; i<s.length(); i++) {
            for(int j=i; j<s.length(); j++) {
                
//                 validates substring as palindrome
                string sub = s.substr(i, j-i+1);
                int start =0;
                int end = sub.length()-1;
                bool is = true;
                while(start <= end) {
                    if(sub[start] != sub[end]){
                        is = false;
                        break;
                    }
                    start++;
                    end--;
                }
                if(is) {
                count++;
                }
            }
        }
        return count;
    }