class Solution {
public:
    // 279. Perfect Squares
//     21 minutes with explination 
    // Runtime: 464 ms, faster than 31.67% of C++ online submissions for Perfect Squares.
// Memory Usage: 9.4 MB, less than 41.62% of C++ online submissions for Perfect Squares.
    int numSquares(int n) {
       vector<int> squares;
        
        int i =1;
        while( i*i <= n) {
            squares.push_back(i*i);
            i++;
        }
        
        vector<int> dp(n+1, 0);
        for(int i = 1; i< dp.size(); i++) {
            
            for( int square: squares) {
                if(square <= i) {
//                     the new square were adding to the sum plus the remaining sum left to get a values of suproblem i
                    int ans = 1 + dp[i - square];
                    
//                     update if optimized, else leave it the same which means to ignore current square and keep rpeviously used answer dervied from not having this number
                    if(dp[i] > ans || dp[i] == 0) {
                        dp[i] = ans;
                    }
                }else{
                    break;
                }
            }
        }
        return dp[n];
    }
};

class Solution {
public:
//     279. Perfect Squares
//     time taken: 56 minutes, many small erros, like using max instead of min, also took a while to execute the 2d array
//     Runtime: 208 ms, faster than 69.86% of C++ online submissions for Perfect Squares.
// Memory Usage: 9.2 MB, less than 49.36% of C++ online submissions for Perfect Squares.

    int numSquares(int n) {
        int maxSquare = 1;
        while(maxSquare*maxSquare <= n) { // needs to be and eqaul to for cases like 1, since 1^2 =1 so if we dindt try to move onto two we would subtract 1 from 1 which is not the largest square
            maxSquare++;
        }
        maxSquare--;
        
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        for(int j=1; j< dp.size(); j++) {
//             loop though avaible squares
            for(int x=1; x<= maxSquare; x++) {
                if(x*x <= j) {
                    // cout << "here " << x <<  " "<< j<< endl; /
                  dp[j] =  min(dp[j-x*x] + 1,  dp[j]); // tak
                    // cout << "dp[j] after is : " << dp[j] << endl;
                }else{
                     // take from last solution since we cant consider this new square value
                    break;
                }
            }
        }
        //  for(int i=0; i< dp.size(); i++) {
        //     cout << i << " " << flush;
        // }
        // cout << endl;
        // for(int i=0; i< dp.size(); i++) {
        //     cout << dp[i] << " " << flush;
        // }
        return dp[n];
    //     vector<vector<int>> dp(maxSquare, vector<int> (n+1, 0));
    //         for(int j=1; j< dp[i].size(); j++) {
    //             for(int i=0; i<dp.size(); i++) {
    // //             loop though avaible squares
    //                 for(int x=1; x<= maxSquare; x++) {
    //                     if(x*x <= j) {
    //                       dp[i][j] =  dp[i][j-x] + 1;
    //                         break;
    //                     }else{
    // //                         we cant conisder this square, take from 'above'
    //                         dp[i][j] = dp[i-1][j-1-x];// best answer using the previous square
    //                         break; // no more xs will be valid, break
    //                     }
    //                 }
    //         }
    //     }
        // return dp[maxSquare-1][n];
    }
};