// 39. Combination Sum
// Runtime: 11 ms, faster than 62.22% of C++ online submissions for Combination Sum.
// Memory Usage: 11 MB, less than 59.18% of C++ online submissions for Combination Sum.
class Solution{
    public:
    vector<vector<int>> res;
    vector<int> combo;
    void rec(int sum, int i, vector<int>& nums, int target) {
        if(sum> target) {
            return;
        }
        if(sum == target) {
            res.push_back(combo);
            return;
        }
//         dwon here means sum < target so add more numbers
        for(int j = i; j<nums.size(); j++) {
            combo.push_back(nums[j]);
            rec(sum+nums[j], j, nums, target);
            combo.pop_back();
        }
    }
     vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
         rec(0, 0, candidates, target);
         return res;
     }
};

class Solution {
public:
//     Runtime: 47 ms, faster than 29.17% of C++ online submissions for Combination Sum.
// Memory Usage: 18.9 MB, less than 26.21% of C++ online submissions for Combination Sum.
    // time taken: 12 minutes 
    vector<vector<int>> res;
    void bt(vector<int> &nums, int i, int sum, int t, vector<int> vec) {
        if(sum == t) {
            
            res.push_back(vec);
            return;
        }
        if(sum > t) {
            return;
        }
        
        for(int j=i; j<nums.size(); j++) {
            sum = sum + nums[j];
            vec.push_back(nums[j]);
            bt(nums, j, sum, t, vec);
//             backtrack since we are finshed with this value at nums[i]
            sum = sum - nums[j];
            vec.pop_back();
            
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> vec{};
        bt(candidates, 0, 0, target, vec);
        return res;
    }
};