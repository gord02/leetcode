
// 763. Partition Labels
// time: 33 minutes, minror erros delayed it
// Runtime: 28 ms, faster than 5.18% of C++ online submissions for Partition Labels.
// Memory Usage: 9.6 MB, less than 5.38% of C++ online submissions for Partition Labels.
static bool func(vector<int> i, vector<int> j) {
    if(i[0] == j[0]) {
        return i[1] < j[1];
    }
    return i[0] < j[0];
}
class Solution{
    public:
      vector<int> partitionLabels(string s) {
          map<char, vector<int>> dict;
          
        for(int i=0; i<s.size(); i++) {
            auto it = dict.find(s[i]);
            if(it == dict.end() ) {
                dict.insert(pair<char, vector<int>> (s[i], {i, i}) );
            }else{
                it->second[1] = i;
            }
        }
        vector< vector<int>> ranges{{0,0}, {(int)s.size()-1, (int)s.size()-1}};
        map<char, vector<int>>::iterator it = dict.begin();
        while(it != dict.end()) {
            ranges.push_back( {it->second[0], it->second[1]});
            it++;
        }
        sort(ranges.begin(), ranges.end(), func);
         vector<vector<int>> res;
          res.push_back(ranges[0]);
          // cout << ranges[0][0] << ranges[0][1] << endl;
          for(int i=1; i<ranges.size(); i++) {
              int a1 = res.back()[0];
              int a2 = res.back()[1];
              
              int b1 = ranges[i][0];
              int b2 = ranges[i][1];
              
              // cout << a1 <<" " << a2 << " " << b1 << " " << b2 << endl;
              
              if(a1 < b1 && b2 < a2) {
                  continue;
              }
//               complete overlap
              else if(b1 < a1 && a2 < b2) {
                  res.pop_back();
                  res.push_back({b1, b2});
              }
//               no overlap
              else if(a1< b1 && a2 < b1) {
                   res.push_back({b1, b2});
              }
//               parital overlap
              else if(a1 <= b2 && b1 <= a2) {
                  res.pop_back();
                  res.push_back({a1, b2});
              }
            }
          vector<int> sizes;
          for(int i=0; i<res.size(); i++) {
              sizes.push_back(res[i][1] - res[i][0]+1);
          }
          return sizes;
          
      }
};