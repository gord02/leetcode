class Solution {
public:
    // 795. Number of Subarrays with Bounded Maximum
//     time taken: 41 minutes
    // Runtime: 230 ms, faster than 5.07% of C++ online submissions for Number of Subarrays with Bounded Maximum.
// Memory Usage: 60.3 MB, less than 5.07% of C++ online submissions for Number of Subarrays with Bounded Maximum.
    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {
        int count = 0;
        stack<int> s; //stores indice of max element so far , decreasing queue
        vector<int> subLen;
        
        for(int i=0; i< nums.size(); i++) {
            while(s.empty() == false && nums[s.top()] <= nums[i]) {
                s.pop();
            }
            int leftBound = -1;
            if(s.empty() == false) {
                leftBound = s.top();
            }
            subLen.push_back(i-leftBound);
            s.push(i);
        }
//         emptying for reuse
         while(s.empty() == false) {
                s.pop();
         }
        
        for(int i=nums.size()-1; i>=0; i--) {
            while(s.empty() == false && nums[i] > nums[s.top()]) {
                s.pop();
            }
            int rightBound = nums.size();
            if(s.empty() == false) {
                rightBound = s.top();
            }
            
            subLen[i] = (rightBound - i)*subLen[i];
            
            if(left <= nums[i] && nums[i] <= right) {
                count+= subLen[i];
            }
            s.push(i);
        }
        return count;
    }
};