/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// 814. Binary Tree Pruning
//     time taken:26 minutes, took a while to flesh out plan for code, initial idea was naive and I only realized this when I was just about to start and realized both a boolean and treenode would need to be returned. Thus leading to more time being spent to work out that I needed two dfs functions
    // Runtime: 0 ms, faster than 100.00% of C++ online submissions for Binary Tree Pruning.
// Memory Usage: 8.7 MB, less than 93.56% of C++ online submissions for Binary Tree Pruning.

    bool findOnes(TreeNode* node) {
        if(node == nullptr) {
            return false;
        }
        bool cur = false;
        if(node->val == 1) {
            cur = true;
        }
        bool left = findOnes(node->left);
        bool right = findOnes(node->right);
        
        return left|| right || cur;
    }
    
    TreeNode* dfs(TreeNode* node) {
        if(node == nullptr) {
            return nullptr;
        }
//         drill down first 
        node->left = dfs(node->left);
        node->right = dfs(node->right);
        
//         then search for ones
        bool res = findOnes(node);
//         removing the branch
        if(res == false) {
            return nullptr;
        }
        return node;
    }
    TreeNode* pruneTree(TreeNode* root) {
        return dfs(root);
    }
};