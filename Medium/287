class Solution {
public:
    // 10 minutes 

// 128 ms
// Beats
// 50.67%
// Memory
// 61.2 MB
// Beats
// 65.87%
 int findDuplicate(vector<int>& nums) {
        int x=0;
        // each number has a rightful place in the array since the numbers are in the range of 1-n, the rightful place of each number is their values - 1.
            // [2,2,2,2,2], doesnt work
        for(int i=1; i<= nums.size() -1; i++) {
          x= x^i;
        }
        for(int i=0; i< nums.size(); i++) {
          x= x^nums[i];
        }
        return x;
    }
    // int findDuplicate(vector<int>& nums) {
    //     int i=0;
    //     // each number has a rightful place in the array since the numbers are in the range of 1-n, the rightful place of each number is their values - 1.
    //     while(i < nums.size()) {
    //         while(nums[i] != nums[nums[i] - 1]) {
    //             swap(nums[i], nums[nums[i] - 1]);
    //         }
    //         i++;
    //     }
    //     for(int i=0; i< nums.size(); i++) {
    //         if(nums[i] != i+1) {
    //             // repeated number
    //             return nums[i];
    //         }
    //     }
    //     return -1;
    // }
};