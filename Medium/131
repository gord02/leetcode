class Solution {
public:
// 131. Palindrome Partitioning
// time taken: 33 minutes, forgot to adjust l and r pointer in valid palindrome
    bool isPalindrome(string s) {
        int l = 0;
        int r = s.size()-1;
        while(l < r) {
            if( s[l] != s[r]) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
    void rec(int i, vector<string> subs, string s, vector<vector<string>> &res) {
        if(i == s.size()) {
            res.push_back(subs);
            return;
        }
        cout << i << endl;
        for(int j =1; j<= s.size()-i; j++) {
            string subStr = s.substr(i, j);
            if(isPalindrome(subStr)) {
                subs.push_back(subStr);
                rec(i+j, subs, s, res);
                subs.pop_back(); //back tracking
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        rec(0, {}, s, res);
        return res;
    }
};