class Solution {
public:
// 2090. K Radius Subarray Averages

// 16 minutes 

// intuition: 
// slinding window that needs to be updated, we could use a queue that stores indices but we know exactly which element is being added and which is being evicted from the sum. so we dont need to store all those values

// Runtime
// 270 ms
// Beats
// 28.31%
// Memory
// 129.9 MB
// Beats
// 62.52%
    vector<int> getAverages(vector<int>& nums, int k) {
        long long sum = 0;
        int size = 2*k + 1;
        vector<int> res (nums.size(), -1);
        for(int i=0; i< nums.size(); i++) {
            sum += nums[i];
            if(i >= size) {
                // need to evict just one element 
                sum = sum - nums[i-size];
            }
            if( i>= 2*k) {
                res[i-k] = sum/size;
            }
        }
        return res;
    }
};