class Solution {
public:
    // 886. Possible Bipartition
//     time taken: very long, Adjecny mapping NEEDS to be bi-directional
//     Runtime: 337 ms, faster than 27.04% of C++ online submissions for Possible Bipartition.
// Memory Usage: 76.5 MB, less than 9.77% of C++ online submissions for Possible Bipartition.
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<int> colours(n+1,0);
        map<int, vector<int>> adj;
        for(vector<int> edge: dislikes) {
            int a = edge[0];
            int b = edge[1];
            auto it = adj.find(a);
            if(it == adj.end()) {
                adj.insert(pair<int, vector<int>> (a, {b}));
            }else{
                it->second.push_back(b);
            }
            it = adj.find(b);
            if(it == adj.end()) {
                adj.insert(pair<int, vector<int>> (b, {a}));
            }else{
                it->second.push_back(a);
            }
        }
        queue<int> q;
        
        for(int i=1; i<n+1; i++) {
            if(colours[i] != 0) {continue;}
            colours[i] = 1;//  colour it 1 to denote group 1
            q.push(i);
            
            while(q.empty() == false) {
                int curNode = q.front();
                q.pop();
                auto it = adj.find(curNode);
                if(it == adj.end()) {continue;}
                for(int nextNode: it->second) {
                    
                    if(colours[nextNode] == 0) {
                        colours[nextNode]= (-1)*colours[curNode];
                        q.push(nextNode);
                    }
                    if(colours[nextNode] == colours[curNode]) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};