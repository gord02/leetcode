class Solution {
public:
// inutition: get the cummulative product from left and right sides
// multiply together when split by current index since the product is cumlative already. multping the two sepearted sides excludes the current index

// have to fill first and last index speraterly, but the first index is filled by the porudct of everything to the right of it, use right[1], similarly, use left[n-2] for res[n-1]
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        for(int i=0; i< n; i++) {
            int l = 1;
            if(i > 0) {
                l = left[i-1];// last value to the left
            }
            left[i] = nums[i]*l;
        }
        right[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--) {
            right[i] = nums[i] * right[i+1];
        }
        res[0] = right[1];
        res[n-1] = left[n-2];
        for(int i=1; i< n-1; i++) {
            res[i] = left[i-1]* right[i+1];
        }
        return res;
    }
};