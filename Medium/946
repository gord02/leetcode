
class Solution {
public:
    // 946. Validate Stack Sequences
//     time taken: 16 minutes 
//     Runtime: 15 ms, faster than 39.59% of C++ online submissions for Validate Stack Sequences.
// Memory Usage: 15.5 MB, less than 15.70% of C++ online submissions for Validate Stack Sequences.
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        stack<int> s;
        int c = 0;
        for(int i=0; i<pushed.size(); i++) {
            while(s.empty() == false && s.top() == popped[c]) {
                c++;
                s.pop();
            }
            s.push(pushed[i]);
        }
        while(s.empty() == false && s.top() == popped[c]) {
                c++;
                s.pop();
        }
//         couldnt pop anymore but there are still elements left means order wasnt correct
        if(s.empty() == false) {
            return false;
        }
        return true;
    }
};

class Solution {
public:
//     946. Validate Stack Sequences
//     Time taken: 24 minutes, wasnt working at max efficiny so coould have shaved off a few minutes(Just saw The Batman lol)
//     Runtime: 12 ms, faster than 56.75% of C++ online submissions for Validate Stack Sequences.
// Memory Usage: 15.3 MB, less than 80.21% of C++ online submissions for Validate Stack Sequences.
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        stack<int> s;
        int r = 0;
        for(int l =0; l<pushed.size(); l++) {
            s.push(pushed[l]);
            while(s.empty() != true && s.top() == popped[r]) {
                s.pop();
                r++;
            }
            if(s.empty() != true && s.top() != popped[r] && l == popped.size()-1) {
                return false;
            }
        }
        return true;
    }
};