class Solution {
public:
// 1020. Number of Enclaves
// time: 19 minutes 
    bool onEdge(int i, int j, int n, int m) {
        if(i == 0 || i == n-1 || j == 0 || j == m-1) {
            return true;
        } 
        return false;
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int count = 0;
        queue<vector<int>> q;
        int n = grid.size();
        int m = grid[0].size();

        // we use the grid as seen vector, if not we would need seen vector of vectors 

        // add all 1s on the outer edge of grid to set 

        for(int i=0; i< grid.size(); i++) {
            for(int j=0; j< grid[0].size(); j++) {
                // if cell is one, count it 
                if(grid[i][j] == 1) {
                    count++;
                }
                // if cell is on the outer edge, add it to the queue
                if(grid[i][j] == 1 && onEdge(i, j, n, m) ) {
                    q.push({i, j});
                    grid[i][j] = 0; // makring nodes as seen before adding to the queue
                }
            }
        }
        vector<vector<int>> dirs{{0,1}, {1,0}, {-1, 0}, {0, -1}};
        while(q.size() > 0) {
            int size = q.size();
            while(size > 0) {
                size--;
                count--; // the only things added to queue are 1s that are reachable from the edge, decrment total count of 1s that are not reachable from edge since we have one now that is reachable from the edge
                auto cell = q.front();
                q.pop();

                for(auto dir: dirs) {
                    int r = cell[0] + dir[0];
                    int c = cell[1] + dir[1];

                    if(r >=0 && c>= 0 && r < n && c < m && grid[r][c] == 1 ) {
                        q.push({r, c});
                        grid[r][c] = 0; // makring nodes as seen before adding to the queue
                    }
                }
            }
        }
        return count;
    }
};

class Solution {
public:
    vector<vector<int>> dirs{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        for(int i=0; i< grid.size(); i++) {
            for(int j = 0; j< grid[0].size(); j++) {
                if(grid[i][j] == 1) {
                    count++;
                }
            }
        }
        queue<vector<int>> q;
        set<vector<int>> seen;
        // you may add cell more than once to q since it can be in the last row and last column!!!
        for(int i=0; i< grid.size(); i++) {
            if(grid[i][0] == 1 && ) {
                q.push({i,0});
                seen.insert({i,0});
            }
            if(grid[i][grid[0].size()-1] == 1) {
                q.push({i, m-1});
                seen.insert({i,m-1});
            }
        }
        for(int j=0; j< grid[0].size(); j++) {
            if(grid[0][j] == 1) {
                q.push({0,j});
                seen.insert({0,j});
            }
            if(grid[grid.size()-1][j] == 1) {
                q.push({n-1, j});
                seen.insert({n-1, j});
            }
        }
        cout << "here"<< endl;
        cout << "size: " << q.size() << endl;
        while(q.empty() == false) {
            vector<int> pos = q.front();
            q.pop();
            count--;
            int row = pos[0];
            int col = pos[1];

            for(auto dir: dirs) {
                int r = row + dir[0];
                int c = col + dir[1];
                if(r >= 0 && c>=0 && r < n && c < m) {
                    if(grid[r][c] == 1 && seen.find({r,c}) == seen.end() ) {
                        seen.insert({r, c});
                        q.push({r, c});
                    }
                }
            }
        }
        return count;
    }
};