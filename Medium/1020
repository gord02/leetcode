class Solution {
public:
    vector<vector<int>> dirs{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        for(int i=0; i< grid.size(); i++) {
            for(int j = 0; j< grid[0].size(); j++) {
                if(grid[i][j] == 1) {
                    count++;
                }
            }
        }
        queue<vector<int>> q;
        set<vector<int>> seen;
        // you may add cell more than once to q since it can be in the last row and last column!!!
        for(int i=0; i< grid.size(); i++) {
            if(grid[i][0] == 1 && ) {
                q.push({i,0});
                seen.insert({i,0});
            }
            if(grid[i][grid[0].size()-1] == 1) {
                q.push({i, m-1});
                seen.insert({i,m-1});
            }
        }
        for(int j=0; j< grid[0].size(); j++) {
            if(grid[0][j] == 1) {
                q.push({0,j});
                seen.insert({0,j});
            }
            if(grid[grid.size()-1][j] == 1) {
                q.push({n-1, j});
                seen.insert({n-1, j});
            }
        }
        cout << "here"<< endl;
        cout << "size: " << q.size() << endl;
        while(q.empty() == false) {
            vector<int> pos = q.front();
            q.pop();
            count--;
            int row = pos[0];
            int col = pos[1];

            for(auto dir: dirs) {
                int r = row + dir[0];
                int c = col + dir[1];
                if(r >= 0 && c>=0 && r < n && c < m) {
                    if(grid[r][c] == 1 && seen.find({r,c}) == seen.end() ) {
                        seen.insert({r, c});
                        q.push({r, c});
                    }
                }
            }
        }
        return count;
    }
};