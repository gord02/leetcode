class Solution {
public:
// 2359. Find Closest Node to Given Two Nodes
// time taken: 30 minutes to TLE, 36 to passing
// didnt know what to do with "where each node has at most one outgoing edge.", this is meant to optimize, we dont need recurions since its just one path to follow, easy to achieve with while loop.

    // one simple path to follow/simiple transtions? iterative approach

    // void rec(int i, int dist, unoredered_map<int, int> &m, set<int> seen, vector<int> &edges) {
    //     if(seen.find(i) != seen.end()) {
    //         return;
    //     }
    //     seen.insert(i);

    //     m.insert(make_pair(i, dist));

    //     if(edges[i] != -1) {
    //         rec(edges[i], dist+1, m, seen, edges);
    //     }
    // }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        unordered_map<int, int> m1;
        unordered_map<int, int> m2;

        // rec(node1, 0, m1, {}, edges);
        // rec(node2, 0, m2, {}, edges);

        int ind = node1;
        int dist = 0;
        set<int> seen;
        while(ind != -1) {
            if(seen.find(ind) != seen.end()) {
                break;
            }
            seen.insert(ind);
            m1.insert(make_pair(ind, dist));
            dist++;

            ind = edges[ind];
        }
        ind = node2;
        dist = 0;
        set<int> seen2;
        while(ind != -1) {
            if(seen2.find(ind) != seen2.end()) {
                break;
            }
            seen2.insert(ind);
            m2.insert(make_pair(ind, dist));
            dist++;
            ind = edges[ind];
        }

        int res = INT_MAX;
        int resDist = INT_MAX;
        for(auto pair: m1) {
            int ind = pair.first;
            int dist = pair.second;

            auto it = m2.find(ind);
            if(it != m2.end()) {

                int maxDist = max(dist, it->second);
                if(resDist > maxDist ) {
                    res = ind;
                    resDist = maxDist;
                }
                else if(resDist == maxDist && res > ind) {
                    res = ind;
                }
            }
        }
        if(res == INT_MAX) {
            return -1;
        }
        return res;
    }
};