/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// 1372. Longest ZigZag Path in a Binary Tree
// time: 20 minutes
// 199 ms
// Beats
// 27.70%
// Memory
// 100.5 MB
// Beats
// 42.16%
/*
intiution: if start of xig zag, two choices else we have to return up one of the subtrees children dependet on what the caller was, either lef to right
*/
    int res = 0;
    int dfs(TreeNode* node, TreeNode* parent) {
        if(node == nullptr) {
            return 0;
        }
        int size = 1;
        int left = dfs(node->left, node);
        int right = dfs(node->right, node);

        // check if node should be start of zig zag
        int nodeLeft = size + left;
        int nodeRight = size + right;
        // choose the better of two possible zig zag paths from our start
        res = max(res, nodeLeft -1);
        res = max(res, nodeRight -1);

        // return up current node as just another memebr of the zig zag, this is depedent on parent
        if(parent != nullptr && parent->left == node) {
            return right + 1; // return number of nodes in right sub tree + current node size
        }

        return left + 1; // return number of nodes in right sub tree + current node size
    }
    int longestZigZag(TreeNode* root) {
        dfs(root, nullptr);
        return res;
    }
};