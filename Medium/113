
class Solution {
public:
//     14 minutes
//     Runtime: 16 ms, faster than 59.45% of C++ online submissions for Path Sum II.
// Memory Usage: 37.2 MB, less than 29.52% of C++ online submissions for Path Sum II.
    vector<vector<int>> res;
    void df(TreeNode* node, vector<int> vec, int sum, int t) {
        if(node == nullptr) {
            return;
        }
//         add before you check that you have reached leaf or it wont be added becuase you return
        sum = sum + node->val;
        vec.push_back(node->val);
        if(node->left == nullptr && node->right == nullptr) {
            // cout << "here node val: " << node->val << endl;
//             at leaf
            // cout << "sum: " << sum << endl; 
            if(sum == t) {
                res.push_back(vec);
            }
            return;
        }
        
        df(node->left, vec, sum, t);
        df(node->right, vec, sum, t);
        
        sum = sum  - node->val;
        vec.pop_back(); 
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> vec;
        df(root, vec, 0, targetSum);
        return res;
    }
};

//     113. Path Sum II
//     Time taken: crazy long, base cases werent thought out, logic didnt work 
    // Runtime: 4 ms, faster than 96.00% of C++, Memory Usage: 19.7 MB, less than 93.02%
    vector<vector<int>> res;
    vector<int> nums;
       void dfs(TreeNode* node, int sum, int target) {
        if(node == nullptr) {
            return;
        }
        sum = sum + node->val;
        nums.push_back(node->val);
    

//         resetting, only once base cases are met since this is when the need to be removed to prevent possibility of removing even after going to null node
        // if(target >= 0) {
        //     if(sum > target) {
        //         sum = sum - nums[nums.size()-1];
        //         nums.pop_back();
        //         return;
        //     }
        // }else{
        //     if(sum < target) {
        //         sum = sum - nums[nums.size()-1];
        //         nums.pop_back();
        //         return;
        //     }
        // }
        if(sum == target && node->left == nullptr && node->right == nullptr ) {
            res.push_back(nums);
            sum = sum - nums[nums.size()-1];
            nums.pop_back();
            return;
        }
        dfs(node->left, sum, target);
        dfs(node->right, sum, target);

//         resetting, after exiting right side of parent
        sum = sum - nums[nums.size()-1];
        nums.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        int sum = 0;
        dfs(root,sum,targetSum);
        return res;
    }