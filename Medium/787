  class Solution {
public:
// 30 + 14 = 44 minutes, plus help from succefuls submission in the past
// Runtime
// 46 ms
// Beats
// 39.87%
// Memory
// 20.5 MB
// Beats
// 10.44%
    struct compare {
        public:
        bool operator()(vector<int> i, vector<int> j) {
            // we want minimum pq(prioirty queue) the smallest value of cost of a flight to be the most accessible
            return i[0] > j[0];
        }
    };

    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        map<int, vector<vector<int>>> adj;
        for(auto flight: flights) {
            int from = flight[0];
            int to = flight[1];
            int price = flight[2];

            auto it = adj.find(from);
            if(it == adj.end()) {
                adj.insert(pair<int, vector<vector<int>>> (from, {{to, price}} ));
            }else{
                it->second.push_back({to, price});
            }
        }

        priority_queue<vector<int> , vector<vector<int>>, compare> pq;

// *     we arsked to potimize for two variables, cost and number of stops, hence use two stores for this. We also need to update these two states of our graph each time we make a movement 

        // stores least amount of stops and cost necessary per node, respecevitely  
        vector<int> stops(n, INT_MAX);
        vector<int> bestCost(n, INT_MAX);
        stops[src] = 0;
        bestCost[src] = 0;
        pq.push({0, src, 0});

        while(pq.empty() == false) {
            // get the next moveemnt(this is the best of all avaible options, least valued option)
            vector<int> cur = pq.top();
            int steps = cur[2]; 
            int node = cur[1];
            int curCost = cur[0];
            pq.pop();
            // overstepd k allowance 
            if(steps > k + 1) {
                continue;
            }
            if(node == dst) {
                return curCost;
            }

            // traverse edges
            auto it = adj.find(node);
            if(it == adj.end()) {
                continue;
            }

            for(vector<int> flight: it->second) {
                int nextNode = flight[0];
                int cost = flight[1];

                // relax node
                if(curCost + cost < bestCost[nextNode]) {
                    // update all states and push relaxed node to potetnially get knew and better movemnt later on in pq
                    bestCost[nextNode] = curCost + cost;
                    stops[nextNode] = steps +1;
                    pq.push({curCost+cost, nextNode, steps+1});
                }
                // optiimzes for the least amount of stops
                else if(steps < stops[nextNode]) {
                    // we need to update these data sets for movement, I think this is justified since we have if and else if, these two statments arent running at the same time so the movemnt down here is still valid and needs to be trated as such by updating state of traversal through flights accordingly 
                    stops[nextNode] = steps +1;
                    bestCost[nextNode] = curCost + cost;
                    pq.push({curCost+cost, nextNode, steps+1});
                }
            }
        }
        return -1;
    }
};

  class Solution {
public:
//      
//      40 minutes, made stupid errors like forgetting to pop or exscuting loop with its not empty
//      Runtime: 19 ms, faster than 97.47% of C++ online submissions for Cheapest Flights Within K Stops.
// Memory Usage: 13.9 MB, less than 47.58% of C++ online submissions for Cheapest Flights Within K Stops.
     class compare{
public:     
    bool operator()(const vector<int> & i, const vector<int> & j) {
        return i[0]>j[0];
    }
};
     int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
//         adj list
         map<int, vector<pair<int, int> > >adj;
         for(int i=0; i<flights.size(); i++) {
             int a = flights[i][0];
             int b = flights[i][1];
             int price = flights[i][2];
             
             auto it = adj.find(a);
             if(it == adj.end()){
                 vector<pair<int, int>> negh{make_pair(b, price)};
                adj.insert(pair<int, vector<pair<int, int>> > (a, negh));
             }else{
                 it->second.push_back(make_pair(b, price));
             }
         }
         vector<int> cheapest(n+1, INT_MAX);
         vector<int> minStops(n+1, INT_MAX);
         minStops[src] = 0;
         cheapest[src] = 0;
         
         priority_queue<vector<int>, vector<vector<int>>, compare> q;
         
         q.push({0, src, 0});
         while(q.empty() == false) {
             // cout <<
             vector<int> front = q.top();
             q.pop();
             int curCost = front[0];
             int curNode = front[1];
             int stops = front[2];
             
             if(stops > k+1) {
                 continue;
             }
             // cout << "curNode: "<< curNode << endl;
             if(curNode == dst) {
                 return curCost;
             }
             
             auto it = adj.find(curNode);
             if(it == adj.end()) {continue;}
             for(auto flight: it->second) {
                 int nextNode = flight.first;
                 int fee = flight.second;
                 
                 if(curCost + fee < cheapest[nextNode]) {
                    cheapest[nextNode] = curCost + fee;
                    minStops[nextNode] = stops+1;
                    q.push({ cheapest[nextNode], nextNode, stops+1});
                 }
                 
                 else if(stops + 1 < minStops[nextNode]) {
                    cheapest[nextNode] = curCost + fee;
                    minStops[nextNode] = stops+1;
                    q.push({ cheapest[nextNode], nextNode, stops+1});
                 }
             }
        }
         return -1;
     }
 };  
   
class Solution {
public:
//     Runtime: 770 ms, faster than 5.02% of C++ online submissions for Cheapest Flights Within K Stops.
// Memory Usage: 49.2 MB, less than 19.18% of C++ online submissions for Cheapest Flights Within K Stops.
    // How to compare elements
struct my_comparator{
    // queue elements are vectors so we need to compare those
    bool operator()(vector<int> const& a, vector<int> const& b) const{
        return a[0] > b[0];// reverse sort puts the lowest value at the top 
    }
};
    
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        map<int, vector<pair<int, int> >> adj;
    
     priority_queue<vector<int>, vector<vector<int>>, my_comparator> q; //min q
    vector<int> cheapest(n, INT_MAX);
    vector<int> stops(n, INT_MAX);
    cheapest[src] = 0; 
    stops[src] = 0; 
    for(int i=0; i<flights.size(); i++) {
        int a = flights[i][0];
        int b = flights[i][1];
        auto it = adj.find(a);
        if(it == adj.end()) {
            vector<pair<int, int>> negh{make_pair(b, flights[i][2])};
            adj.insert(pair<int, vector<pair<int, int> >> (a, negh));
        }else{
            it->second.push_back(make_pair(b, flights[i][2]));
        } 
    }
//         price, node, stops
    q.push({0, src, 0});
    while(q.empty() == false) {
        auto flight = q.top();
        
        q.pop();
        int curCost = flight[0];
        int curNode = flight[1];
        int stopped = flight[2];
        
        if(curNode == dst) {
            return curCost;
        }
        if(stopped > k) {
            continue;
        }
   
        auto it = adj.find(curNode);
        if(it == adj.end()) {continue;}
        for(auto adjNode: it->second) {
            int nextNode = adjNode.first;
            int price = adjNode.second;
            if(price +curCost < cheapest[nextNode]) {
                cheapest[nextNode] = price +curCost;
                q.push({cheapest[nextNode], nextNode, stopped+1});
            }
//             optimize stops
            else if(stopped < stops[nextNode]) {
                cheapest[nextNode] = price +curCost; // need to update cheapest as well since then wed be looking at another path when we are porcessing the nextNOde passed into queue 
                q.push({price +curCost, nextNode, stopped+1});
            }
            stops[nextNode] = stopped;
        }
    }
        return -1;
}
//         struct Compare {
//         bool operator()(vector<int> const & i, vector<int> const & j){ 
//             return i[0] > j[0]; 
//         }
//     };
// int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
// // Build the adjacency matrix
//         map<int, vector<pair<int, int>>> adj;
//         for(int i=0; i<flights.size(); i++) {
//             int a = flights[i][0];
//             int b = flights[i][1];
//             int price = flights[i][2];
//             auto it = adj.find(a);
//             if(it == adj.end()) {
//                 vector<pair<int, int>> negh{make_pair(b, price)};
//                 adj.insert(pair<int, vector<pair<int, int> > > (a, negh));
//             }else{
//                 it->second.push_back(make_pair(b, price));
//             }
//         }
    
//         vector<int> cheapest(n, INT_MAX);
//         vector<int> stops(n, INT_MAX);
//         cheapest[src] = 0;
//         stops[src] = 0;
        
//         // The priority queue would contain (node, cost, stops)
//         priority_queue<vector<int>, vector<vector<int>>, Compare> min_q; 
//         min_q.push({0, src, 0});

//         while(min_q.empty() == false) {
//                 auto top = min_q.top(); 
//                 int total = top[0];
//                 int curNode = top[1];
//                 int cur_stops = top[2];
//                 min_q.pop();
                             
//             if (curNode == dst) {return total; } // If destination is reached, return the cost to get here
//             if (cur_stops > k) { continue;}// If there are no more steps left
       
//                 auto it = adj.find(curNode);
//                 if(it == adj.end()) {continue;}
//                 for(auto pair: it->second) {
//                     int nextNode = pair.first;
//                     int new_flight_price = pair.second;
//                     // int totals = cheapest[curNode]; // cant use cheeast node node apprently 
    
//                     if (total + new_flight_price < cheapest[nextNode]) {
//                         cheapest[nextNode] = total + new_flight_price;
//                         min_q.push({cheapest[nextNode], nextNode, cur_stops + 1});
                        
//                     }
//                     else if (cur_stops < stops[nextNode]) {
//                         cheapest[nextNode] = total+ new_flight_price;
//                         min_q.push({cheapest[nextNode], nextNode, cur_stops + 1});          
//                     }
                    
//                     stops[nextNode] = cur_stops;
//                 }
//              }  
//         return -1;
//     }
};
// class Solution {
// public:
    
//     struct Compare {
//         bool operator()(vector<int> const & i, vector<int> const & j){ 
//             return i[0] > j[0]; 
//         }
//     };
    
//     int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
//         map<int, vector<pair<int, int>>> adj;
//         for(int i=0; i<flights.size(); i++) {
//             int a = flights[i][0];
//             int b = flights[i][1];
//             int price = flights[i][2];
//             auto it = adj.find(a);
//             if(it == adj.end()) {
//                 vector<pair<int, int>> negh{make_pair(b, price)};
//                 adj.insert(pair<int, vector<pair<int, int> > > (a, negh));
//             }else{
//                 it->second.push_back(make_pair(b, price));
//             }
//         }
        
//         vector<int> cheapest(n, INT_MAX);
//         vector<int> stops(n, INT_MAX);
//         cheapest[src] = 0;
//         stops[src] = 0;
        
//         // std::priority_queue<int, vector<int>, greater<int> > my_min_heap;
//         priority_queue<vector<int>, vector<vector<int>>, Compare> min_q; 
//         min_q.push({0, src, 0});
//         while(min_q.empty() == false) {
//             // int node = info[0], stops = info[2], cost = info[1]
//             auto top = min_q.top();
//             // int price = top[0];
//             int curNode = top[1];
//             int cur_stops = top[2];
//             min_q.pop();
//             // cout << "CUR: " << curNode << endl;/
//             if(dst == curNode) {
//                 return price;
//                 // return cheapest[dst];
//             }
//             if(cur_stops >k) {
//                 // cout << "TOO MANY" << " curNode: "<< curNode <<endl;
//                 // cheapest[curNode] = INT_MAX;
//                 continue;
//             }
//             auto it = adj.find(curNode);
//             if(it == adj.end()) {continue;}
//             for(auto pair: it->second) {
//                 int nextNode = pair.first;
//                 int price = pair.second;
//                 cout << "edge, cur: " << curNode << " to " <<nextNode <<endl;
//                cout <<  price << " "<< cheapest[curNode] << " "<< cheapest[nextNode]<< endl;
//                 if(price + cheapest[curNode] < cheapest[nextNode]) {
//                     cheapest[nextNode] = price + cheapest[curNode];
//                     min_q.push({cheapest[nextNode], nextNode, cur_stops+1});
//                 }
//                 else if(cur_stops< stops[nextNode]) {
//                      // minHeap.offer(new int[]{nei, dU + wUV, stops + 1});
//                     // cheapest[nextNode] = price + cheapest[curNode];
//                     min_q.push({cheapest[nextNode]+price, nextNode, cur_stops+1});
//                 }
//                 stops[nextNode] = cur_stops;
//             }
//             // cout << "size: " << min_q.size()<< endl;
//         }
//         return -1;                   
//     }
// };
// =======================
class Solution {
public:
        struct Compare {
        bool operator()(vector<int> const & i, vector<int> const & j){ 
            return i[0] > j[0]; 
        }
    };
int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
// Build the adjacency matrix
        map<int, vector<pair<int, int>>> adj;
        for(int i=0; i<flights.size(); i++) {
            int a = flights[i][0];
            int b = flights[i][1];
            int price = flights[i][2];
            auto it = adj.find(a);
            if(it == adj.end()) {
                vector<pair<int, int>> negh{make_pair(b, price)};
                adj.insert(pair<int, vector<pair<int, int> > > (a, negh));
            }else{
                it->second.push_back(make_pair(b, price));
            }
        }
    
        vector<int> cheapest(n, INT_MAX);
        vector<int> stops(n, INT_MAX);
        cheapest[src] = 0;
        stops[src] = 0;
        
        // The priority queue would contain (node, cost, stops)
        priority_queue<vector<int>, vector<vector<int>>, Compare> min_q; 
        min_q.push({0, src, 0});

        while(min_q.empty() == false) {
                auto top = min_q.top(); 
                int total = top[0];
                int curNode = top[1];
                int cur_stops = top[2];
                min_q.pop();
                             
            if (curNode == dst) {return total; } // If destination is reached, return the cost to get here
            if (cur_stops > k) { continue;}// If there are no more steps left
       
                auto it = adj.find(curNode);
                if(it == adj.end()) {continue;}
                for(auto pair: it->second) {
                    int nextNode = pair.first;
                    int new_flight_price = pair.second;
                    // int totals = cheapest[curNode]; // cant use cheeast node node apprently 
    
                    if (total + new_flight_price < cheapest[nextNode]) {
                        cheapest[nextNode] = total + new_flight_price;
                        min_q.push({cheapest[nextNode], nextNode, cur_stops + 1});
                        
                    }
                    else if (cur_stops < stops[nextNode]) {
                        cheapest[nextNode] = total+ new_flight_price;
                        min_q.push({cheapest[nextNode], nextNode, cur_stops + 1});          
                    }
                    
                    stops[nextNode] = cur_stops;
                }
             }  
        return -1;
    }
};
// class Solution {
// public:
    
//     struct Compare {
//         bool operator()(vector<int> const & i, vector<int> const & j){ 
//             return i[0] > j[0]; 
//         }
//     };
    
//     int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
//         map<int, vector<pair<int, int>>> adj;
//         for(int i=0; i<flights.size(); i++) {
//             int a = flights[i][0];
//             int b = flights[i][1];
//             int price = flights[i][2];
//             auto it = adj.find(a);
//             if(it == adj.end()) {
//                 vector<pair<int, int>> negh{make_pair(b, price)};
//                 adj.insert(pair<int, vector<pair<int, int> > > (a, negh));
//             }else{
//                 it->second.push_back(make_pair(b, price));
//             }
//         }
        
//         vector<int> cheapest(n, INT_MAX);
//         vector<int> stops(n, INT_MAX);
//         cheapest[src] = 0;
//         stops[src] = 0;
        
//         // std::priority_queue<int, vector<int>, greater<int> > my_min_heap;
//         priority_queue<vector<int>, vector<vector<int>>, Compare> min_q; 
//         min_q.push({0, src, 0});
//         while(min_q.empty() == false) {
//             // int node = info[0], stops = info[2], cost = info[1]
//             auto top = min_q.top();
//             // int price = top[0];
//             int curNode = top[1];
//             int cur_stops = top[2];
//             min_q.pop();
//             // cout << "CUR: " << curNode << endl;/
//             if(dst == curNode) {
//                 return price;
//                 // return cheapest[dst];
//             }
//             if(cur_stops >k) {
//                 // cout << "TOO MANY" << " curNode: "<< curNode <<endl;
//                 // cheapest[curNode] = INT_MAX;
//                 continue;
//             }
//             auto it = adj.find(curNode);
//             if(it == adj.end()) {continue;}
//             for(auto pair: it->second) {
//                 int nextNode = pair.first;
//                 int price = pair.second;
//                 cout << "edge, cur: " << curNode << " to " <<nextNode <<endl;
//                cout <<  price << " "<< cheapest[curNode] << " "<< cheapest[nextNode]<< endl;
//                 if(price + cheapest[curNode] < cheapest[nextNode]) {
//                     cheapest[nextNode] = price + cheapest[curNode];
//                     min_q.push({cheapest[nextNode], nextNode, cur_stops+1});
//                 }
//                 else if(cur_stops< stops[nextNode]) {
//                      // minHeap.offer(new int[]{nei, dU + wUV, stops + 1});
//                     // cheapest[nextNode] = price + cheapest[curNode];
//                     min_q.push({cheapest[nextNode]+price, nextNode, cur_stops+1});
//                 }
//                 stops[nextNode] = cur_stops;
//             }
//             // cout << "size: " << min_q.size()<< endl;
//         }
//         return -1;                   
//     }
// };


