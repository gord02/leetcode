class Solution {
public:
// 931. Minimum Falling Path Sum
// time: 14 min
// bf: from each starting position, traverse all paths from starting node, get smallest sum achieved. O(n * n^2) 
// intution: for each cell we can ask ourselves, how did we arrive at this cell? In this question, there are three ways at most to arrive at a cell. Loop through all three and save the smallest valued way to arrive. Repeat until at bottom row.
// First row is default, no addition needed
    int minFallingPathSum(vector<vector<int>>& matrix) {
    //    editing  orgiinal matrix
    // start from second row, no need to transition to first row, starting row
        for(int i=1; i< matrix.size(); i++) {
            for(int j=0; j< matrix[i].size(); j++) {
                int smallest = INT_MAX;
                for(int k=-1; k<=1; k++) {
                    int c = j + k;
                    // valid column to choose from
                    if(c >= 0 && c < matrix[i].size()) {
                        smallest = min(smallest, matrix[i-1][c]);
                    }
                }
                // add the smallest number in previous row to current value of cell
                matrix[i][j] += smallest;
            }
        } 

        int res = INT_MAX; 
        for(int j=0; j < matrix[0].size(); j++) {
            res = min(res, matrix[matrix.size()-1][j]);
        }
        return res;
    }
};

class Solution {
public:
//     931. Minimum Falling Path Sum
// time taken: 23 minutes with explanation. 
// Runtime
// 38 ms
// Beats
// 34.96%
// Memory
// 10.2 MB
// Beats
// 66.30%
// Notes: runtime is O(n^2), recursion or dp is O(n^2) this is because, each cell only has at most three options 
// to traverese to, save these values and work from bottom up(iterative)
    int minFallingPathSum(vector<vector<int>>& matrix) {
        // vector<vector<int>> dp(matrix.size(), vector<int> (matrix.size(), 0));
        vector<vector<int>> dp = matrix;

        for(int r = matrix.size()-2; r>=0; r--) {
            for(int c = 0; c<matrix[r].size(); c++) {
                int low = INT_MAX;

                // check the three options 
                for(int i = -1; i<=1; i++) {
                    if(c + i >= 0 && c + i < matrix[r].size()) {
                        low = min(low, dp[r+1][c+i]);
                    }
                }
                dp[r][c] = low + matrix[r][c];
            }
        }
        int res = INT_MAX;
        for(int c =0; c<dp[0].size(); c++) {
            res = min(res, dp[0][c]);
        }
        return res;
    }
};


class Solution {
public:
//     931. Minimum Falling Path Sum
//     time taken: 38 minutes 
//     Runtime: 30 ms, faster than 16.72% of C++ online submissions for Minimum Falling Path Sum.
// Memory Usage: 10.3 MB, less than 42.98% of C++ online submissions for Minimum Falling Path Sum.
//     Why does adding in the matrix by refrence and not value make this soultion not TLE? 
    // - > ANSWER passing by reference or pointer is typically faster than passing by value, if the amount of data passed by value is larger than the size of a pointer
    int bt(vector<vector<int>> &matrix, int i, int j,  vector<vector<int>> &dp) {
        if(i<0 || i>=matrix.size() || j<0 || j>=matrix[0].size()) {
            return INT_MAX-1000;
        }
        if(i == matrix.size() -1) {
            // cout << "here" << endl;
            return matrix[i][j];
        }
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        int res = min( bt(matrix, i+1, j, dp)+matrix[i][j] , bt(matrix, i+1, j-1, dp)+matrix[i][j]);
         res = min(res , bt(matrix, i+1, j+1, dp)+matrix[i][j]);
        // cout << "res: " << res << endl;
        dp[i][j] = res;
        return res;
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        vector<vector<int>> dp(matrix.size(), vector<int> (matrix[0].size(), -1));
            int best = INT_MAX;
        
        // for(int j=0; i<matrix.size(); i++) {
    if(matrix.size() <2) {
        
        for(int j=0; j<matrix[0].size(); j++) {
                if(matrix[0][j] < best) {
                    best = matrix[0][j];
                }
            }
        }else{
        for(int j=0; j<matrix[0].size(); j++) {
                bt(matrix, 0, j, dp);
                if(dp[0][j] < best) {
                    best = dp[0][j];
                }
            }
    }
        return best;
            
    }
};