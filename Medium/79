class Solution {
public:
// Seen map made it too slow, didnt impl,ent bactracking or boolean return type veriosn of this code properly 


//     Runtime: 331 ms, faster than 72.76% of C++ online submissions for Word Search.
// Memory Usage: 8 MB, less than 75.08% of C++ online submissions for Word Search.
    // map<vector<int>, int> seen;
    // bool found = false;
    bool dfs(int r, int c, int i, string& word, vector<vector<char>>& board) {
        if(i>=word.length()) {
            return true; // word is found
        }
        if(r < 0|| r>=board.size() || c<0 || c>=board[0].size()) {
            // cout << "out of bounds" << endl;
            return false;// word is not found this way in path
        }
            // cout << r << " " << c << " " << word[i] << " "<<board[r][c] <<  endl;
        
        // if(seen.find({r,c}) != seen.end()) {
        if(board[r][c] == '-') {
            // cout << "seen" << endl;
            return false; // word is not found this way in path
        }
        // seen.insert(pair<vector<int>, int> ({r,c}, 1));
        char ch = board[r][c];
        bool res = false;
        if(board[r][c] == word[i]) {
            board[r][c] = '-';
            
            // cout << "vlaid at: " << r << " " << c << endl;
            res = dfs(r+1, c, i+1, word, board)
                || dfs(r, c+1, i+1, word, board)|| 
                dfs(r-1, c, i+1, word, board) || 
                dfs(r, c-1, i+1, word, board);
        }
//         if we reach down here this dfs path didnt work so backtrack
        // cout << "jere"<< endl;
        // cout << "erasing: " << r << " " << c << endl;
        // seen.erase({r,c});
         board[r][c] = ch;
        // cout << "worked"<< endl;
        
        return res;
    }
    
//        void dfs2(int r, int c, int i, string& word, vector<vector<char>>& board) {
//            if(found == true) {
//                return;
//            }
//         if(i>=word.length()) {
//             found = true;
//             return;
//         }

//         if(r < 0|| r>=board.size() || c<0 || c>=board[0].size()) {
//             return;// word is not found this way in path
//         }
        
//          if(seen.find({r,c}) != seen.end()) {
//             // cout << "seen" << endl;
//             return; // word is not found this way in path
//         }
//         seen.insert(pair<vector<int>, int> ({r,c}, 1));

//         if(board[r][c] == word[i]) {
//              dfs(r+1, c, i+1, word, board);
//             dfs(r, c+1, i+1, word, board); 
//             dfs(r-1, c, i+1, word, board);
//             dfs(r, c-1, i+1, word, board);
//         }
// //         if we reach down here this dfs path didnt work so backtrack
//         seen.erase({r,c});        
//     }
    bool exist(vector<vector<char>>& board, string word) {
        for(int i=0; i<board.size(); i++) {
            for(int j=0; j<board[i].size(); j++) {
                if(board[i][j] == word[0]) {
                    // cout << i << " " << j << endl; 

                        if(dfs(i, j, 0, word, board)){
                            return true;
                        }
//                     if(found){
//                         return true;
//                     }
                    // seen.clear();
                }
                // cout << "sfter" << endl;
            }
        }
        return false;
    }
};