class Solution{
    public:
    // 437. Path Sum III
//     Time taken: 26 minutes, should have been much faster, didnt do logic correclty, erased completely instead of decrmemnting, sums arent unique, and didnt check constraints properly, 10^9 values so use long !!!!!
    Runtime: 44 ms, faster than 28.30% of C++ online submissions for Path Sum III.
Memory Usage: 20.4 MB, less than 26.72% of C++ online submissions for Path Sum III.
    
    int count = 0;
    map<int, int> pastSums;// maps sum to number of occurences 
    void dfs(TreeNode* node, long curSum, int t) {
        if(node == nullptr) {   
            return;
        }
        
        curSum += node->val;
        if(curSum == t) {
            count++;
        }
        
        auto it = pastSums.find(curSum-t);
     
        if(it != pastSums.end()) {
            count+= it->second;
        }
        
        it = pastSums.find(curSum);
        if(it == pastSums.end()) {
            pastSums.insert(pair<int, int> (curSum, 1));
        }else{
            it->second++;
        }
        dfs(node->left, curSum, t);
        dfs(node->right, curSum, t);

         it = pastSums.find(curSum);
        it->second--;
        if(it->second == 0) {
            pastSums.erase(it);
        }
        // if(pastSums.find(curSum))
        // cout << "breaking above" << endl;
        // pastSums.erase(it);
    }
    
    int pathSum(TreeNode* root, int targetSum) {
        dfs(root, 0, targetSum);

        return count;
    }
    
};

class Solution {
public:    
    // 437. Path Sum III
//     time taken: 23 minutes 
//     Runtime: 4 ms, faster than 99.94% of C++ online submissions for Path Sum III.
// Memory Usage: 20.4 MB, less than 21.32% of C++ online submissions for Path Sum III.
    map<int, int> dict;
    int count = 0;
        void dfs(TreeNode* node, long sum, int t) {
            if(node == nullptr) {
                return;
            }
            sum = sum + node->val;
            
            if(sum == t) {
                count++;
            }
            auto it = dict.find(sum-t);
            if(it != dict.end()) {
                count = count + it->second;
            }
            it = dict.find(sum);
            if(it == dict.end()) {
                dict.insert(pair<int, int> (sum, 1));
            }else{
                it->second++;
            }
            dfs(node->left, sum, t);
            dfs(node->right, sum, t);
//             back track
            it = dict.find(sum);
            if(it->second > 1) {
                it->second--;
            }else{
                dict.erase(it);
            }
        }
       int pathSum(TreeNode* root, int targetSum) {
           dfs(root, 0, targetSum);
           return count;
       }
    
    //     437. Path Sum III
//     time taken: 30 minutes, MANY errors in logic due to not thinking thorugh all base case and logicistics 
//     Runtime: 7 ms, faster than 99.87% of C++ online submissions for Path Sum III.
// Memory Usage: 20.4 MB, less than 21.86% of C++ online submissions for Path Sum III.
//     map<int, int> dict;
//     int count = 0;
//     void df(TreeNode* node, long long sum, int t) {
//         if(node == nullptr) {
//             return;
//         }
// //         no otehr base cases
//         sum = sum + node->val;
//         // auto it = dict.find(sum); // dont do this here
//         // if(it == dict.end()) {
//         //     dict.insert(pair<int, int> (sum, 1));
//         // }else{
//         //     it->second++;
//         // }
// //         found sum subsquence 
//         // if()
//         if(sum == t) {
//             count++;
//         }
//         auto it = dict.find(sum - t);
//         if(it != dict.end()) {
//             count = count + it->second;
//         }
//         // cout << "sum: "<< sum << endl;
//         it = dict.find(sum); 
//         if(it == dict.end()) {
//             dict.insert(pair<int, int> (sum, 1));
//         }else{
//             it->second++;
//         }
        
//         df(node->left, sum, t);
//         df(node->right, sum, t);
              
// //         bt
//          it = dict.find(sum); 
//         if(it->second == 1) {
//             dict.erase(sum);  
//         }else{
//             it->second--;
//         }
//         sum = sum - node->val;
              
//     }
//     int pathSum(TreeNode* root, int targetSum) {
//         // int sum = 0;
//         df(root, 0, targetSum);
//         return count;
//     }
};