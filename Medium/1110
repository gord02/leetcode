/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// 1110. Delete Nodes And Return Forest
// Runtime
// 32 ms
// Beats
// 27.26%
// Memory
// 25.1 MB
// Beats
// 95.48%
// time: roughly 30 minutes
// try to solve as human first, play around with things, realized that you have to refelct the deltiion before visiitng the children, did this we additional value passed down in reucison
    TreeNode* rec(TreeNode* node, TreeNode* par, unordered_set<int> &toDel, vector<TreeNode*>& res) {
        if(node == nullptr) {
            return nullptr;
        }
        auto it = toDel.find(node->val);

        if(it != toDel.end()) {
            // the children no loinger have parent since cur node is being deleted
            node->left = rec(node->left, nullptr, toDel, res);
            node->right = rec(node->right, nullptr, toDel, res);
        }else{
            // update the node's left and right to reflect the deletion of nodes
            node->left = rec(node->left, node, toDel, res);
            node->right = rec(node->right, node, toDel, res);
        }
        // parent is null and node is not to be deleted, then add to resulting array
        if(par == nullptr &&  it == toDel.end()) {
            // node is updated tree since we visit children before doing the push
            res.push_back(node); 
        }
        // if node is to be deleted, return null
       if(it != toDel.end()) {
           return nullptr;
       }
       return node;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> res;
        unordered_set<int> toDelete;
        for(int i: to_delete) {
            toDelete.insert(i);
        }
        rec(root, nullptr,toDelete, res);
        return res;
    }
};