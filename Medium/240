//     240. Search a 2D Matrix II
//     Time taken: 40 minutes
//     Runtime: 568 ms, faster than 5.35% of C++, Memory Usage: 14.9 MB, less than 66.70%
      bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         colmuns
        int left = 0;
        int right = matrix[0].size()-1;
        for(int row =0; row<matrix.size(); row++) {
        left = 0;
        right = matrix[0].size()-1;
            while(left<= right) {
                int m = floor((right-left)/2) + left;
                if(matrix[row][m] == target) {
                    return true;
                }
                else if(matrix[row][m] > target) {
                    right = m-1;
                }else{
                    left = m + 1;
                }
            }
        }

// rows
      

        for(int col =0; col<matrix[0].size(); col++) {
            left = 0;
            right = matrix.size()-1;
            while(left<= right) {
                int m = floor((right-left)/2) + left;
                if(m >= matrix.size()) {
                    return false;
                }
                if(matrix[m][col] == target) {
                    return true;
                }
                else if(matrix[m][col] > target) {
                    right = m-1;
                }else{
                    left = m + 1;
                }
            }
        }
        
        return false;
    }
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int left = 0;
//         int right = matrix[0].size()-1;

//             while(left<= right) {
//                 int m = floor((right-left)/2) + left;
//                 if(matrix[0][m] == target) {
//                     return true;
//                 }
//                 else if(matrix[0][m] > target) {
//                     right = m-1;
//                 }else{
//                     left = m + 1;
//                 }
//             }


//         int col = right;
//         cout << "col: " << col << endl;
        
//         left = 0;
//         right = matrix.size()-1;
//         if(col < 0 || col >= matrix[0].size()) {
//             return false;
//         }
        
//         while(left<= right) {
//             int m = floor((right-left)/2) + left;
//             if(m >= matrix.size()) {
//                 return false;
//             }
//             cout << "past if" << endl;
//             cout << "col: " << col << " m: " << m << endl;
//             if(matrix[m][col] == target) {
//                 return true;
//             }
//             else if(matrix[m][col] > target) {
//                 right = m-1;
//             }else{
//                 left = m + 1;
//             }
//         }
        
//         return false;
//     }
//     bool colCheck(int left, int right) {
//              while(left<= right) {
//                 int m = floor((right-left)/2) + left;
//                 if(matrix[0][m] == target) {
//                     return true;
//                 }
//                 else if(matrix[0][m] > target) {
//                     right = m-1;
//                 }else{
//                     left = m + 1;
//                 }
//             }
//     }
//     bool rowCheck(int left, int right, int col) {
//           while(left<= right) {
//             int m = floor((right-left)/2) + left;
//             if(m >= matrix.size()) {
//                 return false;
//             }
//             cout << "past if" << endl;
//             cout << "col: " << col << " m: " << m << endl;
//             if(matrix[m][col] == target) {
//                 return true;
//             }
//             else if(matrix[m][col] > target) {
//                 right = m-1;
//             }else{
//                 left = m + 1;
//             }
//         }
        
//         return false;
//     }
//         bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
//         int left = 0;
//         int right = matrix[0].size()-1;
        
//         if(martix[0][martix.size()-1] < target){
//             rowCheck(left, )
//         }
     


//         int col = right;
//         cout << "col: " << col << endl;
        
//         left = 0;
//         right = matrix.size()-1;
//         if(col < 0 || col >= matrix[0].size()) {
//             return false;
//         }
        
      
        
//         return false;
//     }