class RandomizedSet {
public:
    // 380. Insert Delete GetRandom O(1)
//     8 minutes 
    // Runtime: 584 ms, faster than 31.50% of C++ online submissions for Insert Delete GetRandom O(1).
// Memory Usage: 96.9 MB, less than 82.25% of C++ online submissions for Insert Delete GetRandom O(1).
    unordered_set<int> set;
    RandomizedSet() {
    }
    
    bool insert(int val) {
        auto it = set.find(val);
        if( it != set.end()) {
            return false;
        }
        set.insert(val);
        return true;
    }
    
    bool remove(int val) {
        auto it = set.find(val);
        if( it == set.end()) {
            return false;
        }
        set.erase(it);
        return true;
    }
    
    int getRandom() {
        auto it = set.begin();
        int size = set.size();
        int i = rand() % size;
        for(int j = 1; j<= i; j++) {
            it++;
        }
        return *it;
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */

class RandomizedSet {
public:
    // 380. Insert Delete GetRandom O(1)
    // Time taken: 19 minutes, carless error at the end that delayed submission
//     Runtime: 335 ms, faster than 48.08% of C++ online submissions for Insert Delete GetRandom O(1).
// Memory Usage: 97.4 MB, less than 6.50% of C++ online submissions for Insert Delete GetRandom O(1).
    vector<int> ints;
    map<int, int> dict;
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        auto it = dict.find(val);
        if(it == dict.end()) {
            ints.push_back(val);
            dict.insert(pair<int, int> (val, ints.size()-1));
            return true;
        }
        return false;
    } 
    
    bool remove(int val) {
        auto it = dict.find(val);
        if(it == dict.end()) {
            return false;
        }
        int pos = it->second;
        it->second = ints.size()-1;
        dict.erase(it);
        it = dict.find(ints[ints.size()-1]);
        it->second = pos;
        swap(ints[pos], ints[ints.size()-1]);
        ints.pop_back();
        return true;
    }
    
    int getRandom() {
        return ints[rand()% ints.size()];
    }
};