   // 697. Degree of an Array
//     time taken : 34 minutes, errors in finding max degrees(guess i cant be done in one go, unless you re search for number since iterator apprently doesnt update itself)
    // LESSON: iterators dont get updated, incrmenting the value of an iterator 
// Runtime: 61 ms, faster than 50.00% of C++ online submissions for Degree of an Array.
// Memory Usage: 26.1 MB, less than 43.33% of C++ online submissions for Degree of an Array.
    int findShortestSubArray(vector<int>& nums) {
        // find degress 
        map<int, int> dict;
        int deg = 0;
        for(int i=0; i<nums.size(); i++) {
            auto it = dict.find(nums[i]);
            if(it == dict.end()) {
                dict.insert(pair<int, int> (nums[i], 1));
            }else{
                it->second++;
                
            }
        }
        map<int, int>::iterator it = dict.begin();
        while(it != dict.end()) {
            if(it->second > deg) {
                deg = it->second;
            }
            it++;
        }
        
        int l = 0;
        int r = 0;
        dict.clear();
        int min = nums.size();
        while(r < nums.size()) {
            auto it = dict.find(nums[r]);
            if(it == dict.end()) {
                dict.insert(pair<int, int> (nums[r], 1));
            }
            else if(it != dict.end()){
                it->second++;
            }
            it = dict.find(nums[r]);        // why is this necessary?
            //  found valid substring and we can now reduce size
            if(it->second == deg) {
                    while(it->second == deg) {
                        if(r-l+1 < min) {
                            min = r-l+1;
                        }
                        dict.find(nums[l])->second--;
                        l++;
                    }
                }
        r++;
    }
        return min;
    }