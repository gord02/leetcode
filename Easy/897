//     897. Increasing Order Search Tree
//     Time to implement: 10 minutes
//     Runtime: 0 ms, faster than 100.00% of C++ Memory Usage: 8.1 MB, less than 18.07% of C++
    // static bool func(int i, int j) {
    //     return(i<j);
    // }
    // void depthFirst(TreeNode* node, vector<int> &nums) {
    //     if(node == nullptr) {
    //         return;
    //     }
    //     depthFirst(node->left, nums);
    //     nums.push_back(node->val);
    //     depthFirst(node->right, nums);
    // }
    void df(TreeNode* node, vector<TreeNode*> &nums) {
        if(node == nullptr) {
            return;
        }
        df(node->left, nums);
        nums.push_back(node);
        df(node->right, nums);
    }
//     TreeNode* increasingBST(TreeNode* root) {
//         vector<int> nums;
//         depthFirst(root, nums);
        
//         // TreeNode* node(nums[nums.size()-1], nullptr, nullptr);
//         TreeNode* node(nums[nums.size()-1]);
//         // node->val = nums[0];
//         // node->left = nullptr(nums[nums.size()-1], );
//         node->right = nullptr;
//         node->val = nums[nums.size()-1];
//         // for(Node)

//         // for(int i=1; i<nums.size(); i++) {
//         for(int i=nums.size()-2; i>=0; i--) {
            
//             // node = node;
//             TreeNode* newNode;
//             newNode->val = nums[i];
//             newNode->left = nullptr;
//             newNode->right = node;
//             node = newNode;
//         }
//         return node;
//     }
     TreeNode* increasingBST(TreeNode* root) {
        vector<TreeNode*> nums;
        df(root, nums);

        for(int i=0; i<nums.size(); i++) {
             nums[i]->left = nullptr;
             nums[i]->right = nullptr;
        }
        TreeNode* node = nums[0];
        for(int i=1; i<nums.size(); i++) {
            node->right = nums[i];
            node = nums[i];
            }
            return nums[0];
         
        }