class Solution {
public:
// careful with typing variable names
    int numUniqueEmails(vector<string>& emails) {
        set<string> uniq;
        for(string str: emails) {
            string newStr = "";
            int i =0;
            // loop until @
            while(i < str.size() && str[i] != '@') {
                if(str[i] == '+')  {
                    break;
                }
                if(str[i] != '.')  {
                    newStr += str[i];
                }
                i++;
            }
            // get i to @ if not there(resulting from a break)
          while(i < str.size() && str[i] != '@') {
            i++;
          }

            // loop to end of string
            while(i < str.size()) {
                newStr += str[i];
                i++;
            }
            uniq.insert(newStr);
        }
        return uniq.size();
    }
};

class Solution {
public:
    // 929. Unique Email Addresses
//     26 minutes
//     Runtime: 43 ms, faster than 24.30% of C++ online submissions for Unique Email Addresses.
// Memory Usage: 16 MB, less than 12.94% of C++ online submissions for Unique Email Addresses.
//     int numUniqueEmails(vector<string>& emails) {
//         map<string, int> dict;
//         for(string s: emails) {
//             string new_s = "";
//             int at = 0;
            
//             for(int i=0; i<s.length(); i++) {
//                 if(s[i] == '@') {
//                     at = i;
//                     break;
//                 }
//                 if(s[i] == '+') {
//                     break;
//                 }
//                 if(s[i] != '.') {
//                     new_s += s[i];
//                 }
           
//             }
//             while(s[at] != '@') {
//                 at++;
//             }
//             new_s = new_s + s.substr(at, s.length()-at);
//             cout << "new_s: " << new_s << endl;
//              dict.insert(pair<string, int> (new_s, 1));
//         }
//         return dict.size();
//     }
    
//     tim taken: 19 minutes 
//     Runtime: 26 ms, faster than 80.92% of C++ online submissions for Unique Email Addresses.
// Memory Usage: 13.8 MB, less than 73.39% of C++ online submissions for Unique Email Addresses.
        int numUniqueEmails(vector<string>& emails) {
            set<string> unique_e;
            
            for(int i=0; i<emails.size(); i++) {
                bool plus = false;
                bool foundAt = false;
                string s = "";
                for(int j=0; j<emails[i].length(); j++) {
                    if(foundAt) {
                            s+= emails[i][j]; // push everything regardless
                    }
                    else if(!foundAt && emails[i][j] == '.') {
                        continue;
                    }
                    else if(!foundAt && emails[i][j] == '+') {
                        plus = true;
                        continue;
                    }
                    else{
//                         must be chart or at
                      if(emails[i][j] == '@') {
                            foundAt = true;
                          plus = false;
                        }
                        if(!plus) {
                            s+= emails[i][j];
                        }
                    }
                }
                unique_e.insert(s);  
            }
            return unique_e.size();   
        }
};


class Solution {
public:
    // 929. Unique Email Addresses
//     26 minutes
//     Runtime: 43 ms, faster than 24.30% of C++ online submissions for Unique Email Addresses.
// Memory Usage: 16 MB, less than 12.94% of C++ online submissions for Unique Email Addresses.
    int numUniqueEmails(vector<string>& emails) {
        map<string, int> dict;
        for(string s: emails) {
            string new_s = "";
            int at = 0;
            
            for(int i=0; i<s.length(); i++) {
                if(s[i] == '@') {
                    at = i;
                    break;
                }
                if(s[i] == '+') {
                    break;
                }
                if(s[i] != '.') {
                    new_s += s[i];
                }
           
            }
            while(s[at] != '@') {
                at++;
            }
            new_s = new_s + s.substr(at, s.length()-at);
            cout << "new_s: " << new_s << endl;
             dict.insert(pair<string, int> (new_s, 1));
        }
        return dict.size();
    }
};