// 953. Verifying an Alien Dictionary
// time take: 27 minutes, errors with INCORECCT mapping delayed process 
// Runtime: 6 ms, faster than 70.62% of C++ online submissions for Verifying an Alien Dictionary.
// Memory Usage: 9.7 MB, less than 17.01% of C++ online submissions for Verifying an Alien Dictionary.
class Solution{
    public:
    bool isAlienSorted(vector<string>& words, string order) {
        map<int, int>pos;
        for(int i=0; i<order.size(); i++) {
            pos[order[i]] = i;
        }
//         assume that all chars will in alpahbet will be in the order string, no repates
        for(int i=0; i < words.size()-1; i++) {
            int l = 0;
            int r = 0;
            string word1 = words[i];
            string word2 = words[i+1];
            
            while(l < word1.size() && r < word2.size()) {
                // cout << "here" << endl; /
                // cout << word1[l] << " " << word2[r] << endl;
                // cout << pos.find(word1[l])->second << " " << pos.find(word2[r])->second << endl;
                if(word1[l] == word2[r]) {
                    // cout << "1" << endl; 
                    
                    l++;
                    r++;
                }
                else if(pos.find(word1[l])->second < pos.find(word2[r])->second ) {
                    // cout << "2" << endl; 
                    break; // no longer need to compare
                }
                else if(pos.find(word1[l])->second > pos.find(word2[r])->second){
                    // cout << "3" << endl; 
                    
                    return false; // invalid lexio ordering
                } 
            }
//             breaking out of while loop means one string ended before the other or they both ended at the same time
            if(l == word1.size() && r != word2.size()) {
                continue;
            }
            if(l != word1.size() && r == word2.size()) {
                return false;
            }
            if(l == word1.size() && r == word2.size()) {
                continue;
            }
        } 
        return true;
    }
};

class Solution {
public:
    // 953. Verifying an Alien Dictionary
    // time tkaen: 26 minutes, didnt fully think through the logic, also took many tries to guess at working logic 
//     Runtime: 3 ms, faster than 93.36% of C++ online submissions for Verifying an Alien Dictionary.
// Memory Usage: 9.9 MB, less than 7.24% of C++ online submissions for Verifying an Alien Dictionary.
    bool isAlienSorted(vector<string>& words, string order) {
        map<char, int>dict;
        for(int i=0; i<order.size(); i++) {
            dict.insert(pair<char, int> (order[i], i));
        }
        for(int i=1; i<words.size(); i++) {
            string w1 = words[i-1];
            string w2 = words[i];
            int p1 = 0;
            int p2 = 0;
            bool valid = false;
            while(p2 != w2.length()) {
                if(p1 >=w1.length()) {
                    valid = true;
                    
                    break;
                }
                // cout << w1[p1] << " - " << w2[p2] << endl;
                if(dict.find(w1[p1])->second > dict.find(w2[p2])->second) {
                    return false;
                }
                else if (dict.find(w1[p1])->second < dict.find(w2[p2])->second) {
                    // cout << "breaking" << endl;
                    valid = true;
                    break;
                }
                // cout << "here" << endl; /
                p2++;
                
                p1++;
            }
// //             w2 finished before w1 did
            if(p1 != w1.length() && !valid) {
                return false;
            }
            
        }
        return true;
    }
};